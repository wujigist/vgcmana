// src/pages/Wallet.jsx

import { useEffect, useState } from "react";
import { fetchMyWallet, fetchMyTransactions } from "@/utils/api";

// Helper function to format currency
const formatCurrency = (amount) => {
Â  if (amount === null || amount === undefined) return "-";
Â  return new Intl.NumberFormat('en-US', {
Â  Â  style: 'currency',
Â  Â  currency: 'USD',
Â  Â  minimumFractionDigits: 2,
Â  }).format(parseFloat(amount));
};

// Helper function to format date
const formatDate = (dateString) => {
Â  Â  if (!dateString) return "-";
Â  Â  // Check if it's already a Date object or a valid string
Â  Â  const date = new Date(dateString);
Â  Â  if (isNaN(date)) return "-";
Â  Â  return date.toLocaleDateString('en-US', {
Â  Â  Â  Â  year: 'numeric',
Â  Â  Â  Â  month: 'short',
Â  Â  Â  Â  day: 'numeric',
Â  Â  Â  Â  hour: '2-digit',
Â  Â  Â  Â  minute: '2-digit',
Â  Â  });
};

export default function Wallet() {
Â  const [wallet, setWallet] = useState(null);
Â  const [transactions, setTransactions] = useState([]);
Â  const [loading, setLoading] = useState(true);
Â  const [error, setError] = useState(null);

Â  useEffect(() => {
Â  Â  async function loadWallet() {
Â  Â  Â  setLoading(true);
Â  Â  Â  setError(null);
Â  Â  Â  try {
Â  Â  Â  Â  const [w, t] = await Promise.all([
Â  Â  Â  Â  Â  Â  fetchMyWallet(),
Â  Â  Â  Â  Â  Â  fetchMyTransactions()
Â  Â  Â  Â  ]);
Â  Â  Â  Â  setWallet(w);
Â  Â  Â  Â  setTransactions(t);
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Failed to load wallet data:", err);
Â  Â  Â  Â  // The error object might have a 'detail' field from the FastAPI HTTPException
Â  Â  Â  Â  setError(err.detail || "Failed to load wallet data.");
Â  Â  Â  } finally {
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  }
Â  Â  }
Â  Â  loadWallet();
Â  }, []);
Â  
Â  const getStatusClasses = (status) => {
Â  Â  switch (String(status).toLowerCase()) {
Â  Â  Â  case 'approved':
Â  Â  Â  case 'active':
Â  Â  Â  Â  return 'text-green-700 bg-green-100 font-medium px-2 py-0.5 rounded-full text-xs';
Â  Â  Â  case 'pending':
Â  Â  Â  Â  return 'text-yellow-700 bg-yellow-100 font-medium px-2 py-0.5 rounded-full text-xs';
Â  Â  Â  case 'rejected':
Â  Â  Â  case 'cancelled':
Â  Â  Â  case 'disabled': // Added disabled for completeness
Â  Â  Â  case 'frozen': // Added frozen for completeness
Â  Â  Â  Â  return 'text-red-700 bg-red-100 font-medium px-2 py-0.5 rounded-full text-xs';
Â  Â  Â  default:
Â  Â  Â  Â  return 'text-gray-700 bg-gray-100 font-medium px-2 py-0.5 rounded-full text-xs';
Â  Â  }
Â  };

Â  if (loading) return (
Â  Â  <div className="flex items-center justify-center min-h-[calc(100vh-4rem)]">
Â  Â  Â  Â  <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-blue-600"></div>
Â  Â  Â  Â  <p className="ml-4 text-lg text-gray-600">Loading wallet data...</p>
Â  Â  </div>
Â  );
Â  
Â  if (error) return (
Â  Â  <div className="p-10 text-center">
Â  Â  Â  Â  <p className="text-red-600 font-semibold text-xl">Error: {error}</p>
Â  Â  </div>
Â  );

Â  if (!wallet) return <p className="p-4 text-center text-xl text-gray-500">No wallet found for your account.</p>;

Â  return (
Â  Â  <div className="p-6 md:p-10 max-w-7xl mx-auto">
Â  Â  Â  <h1 className="text-3xl font-bold text-gray-900 mb-6">My Wallet ðŸ’³</h1>

Â  Â  Â  {/* Wallet Summary */}
Â  Â  Â  <div className="mb-8 p-6 bg-white rounded-xl shadow-lg border-b-4 border-blue-600">
Â  Â  Â  Â  <div className="flex justify-between items-center mb-4 border-b pb-4">
Â  Â  Â  Â  Â  Â  <h2 className="text-2xl font-semibold text-gray-800">Account Summary</h2>
Â  Â  Â  Â  Â  Â  <span className={getStatusClasses(wallet.status)}>{wallet.status}</span>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  
Â  Â  Â  Â  {/* Main Details Grid - Only contains Balance now */}
Â  Â  Â  Â  <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-y-4 gap-x-6">
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  {/* Balance (Top-left, spans 2 columns on small screens) */}
Â  Â  Â  Â  Â  Â  <div className="sm:col-span-2">
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm font-medium text-gray-500">Balance</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-4xl font-extrabold text-blue-600 mt-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {formatCurrency(wallet.balance)} <span className="text-base text-gray-500">{wallet.currency}</span>
Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  </div>
            
            {/* Wallet ID and User ID removed from here */}
Â  Â  Â  Â  </div>
Â  Â  Â  Â  
Â  Â  Â  Â  {/* Capabilities Section */}
Â  Â  Â  Â  <div className="pt-4 border-t mt-6">
Â  Â  Â  Â  Â  Â  <p className="text-sm font-medium text-gray-500 mb-2">Capabilities</p>
Â  Â  Â  Â  Â  Â  <div className="flex flex-wrap gap-4">
Â  Â  Â  Â  Â  Â  Â  Â  <span className={`px-3 py-1 text-sm rounded-full ${wallet.allow_deposits ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {wallet.allow_deposits ? 'Deposits Allowed' : 'Deposits Disabled'}
Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  <span className={`px-3 py-1 text-sm rounded-full ${wallet.allow_withdrawals ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {wallet.allow_withdrawals ? 'Withdrawals Allowed' : 'Withdrawals Disabled'}
Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  <span className={`px-3 py-1 text-sm rounded-full ${wallet.allow_purchases ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {wallet.allow_purchases ? 'Purchases Allowed' : 'Purchases Disabled'}
Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  {/* Transactions Table */}
Â  Â  Â  <h2 className="text-2xl font-bold text-gray-800 mb-4">Transaction History</h2>
Â  Â  Â  <div className="overflow-x-auto shadow-xl rounded-lg border">
Â  Â  Â  Â  <table className="min-w-full divide-y divide-gray-200">
Â  Â  Â  Â  Â  Â  <thead className="bg-gray-100">
Â  Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Type</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="px-6 py-3 text-right text-xs font-semibold text-gray-600 uppercase tracking-wider">Amount</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Status</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider hidden sm:table-cell">Note</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Date</th>
Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  </thead>
Â  Â  Â  Â  Â  Â  <tbody className="bg-white divide-y divide-gray-200">
Â  Â  Â  Â  Â  Â  Â  {transactions.length === 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td colSpan="5" className="text-center py-4 text-gray-500">No transactions recorded.</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  transactions.map((t) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr key={t.id} className="hover:bg-gray-50 transition duration-150">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 capitalize">{t.type}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="px-6 py-4 whitespace-nowrap text-sm text-right font-mono text-gray-700">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {formatCurrency(t.amount)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="px-6 py-4 whitespace-nowrap">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className={getStatusClasses(t.status)}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {t.status}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 hidden sm:table-cell">{t.note || "-"}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {formatDate(t.created_at)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </tbody>
Â  Â  Â  Â  </table>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
}